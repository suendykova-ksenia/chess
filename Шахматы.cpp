#include <string>
#include <iostream>
#include <vector>
using namespace std;
int main()
{
	int k, l, m, n;
	setlocale(LC_ALL, "Russian");
	cout << "Введите данные для первого поля" << endl;
	cout << "Номер вертикали: ";
	cin >> k;
	cout << "Номер горизонтали: ";
	cin >> l;
	cout << "Введите данные для второго поля" << endl;
	cout << "Номер вертикали: ";
	cin >> m;
	cout << "Номер горизонтали: ";
	cin >> n;
	for (int i = 1; i <= 8; i++) // цикл, чтобы вывести доску на экран
	{ 
		for (int j = 1; j <= 8; j++) // вывод горизонтальных полос
		{
			cout << " -";
		}
		cout << endl;
		for (int j = 1; j <= 8; j++) // вывод вертикальных полос
		{
			if ((k == j) and (l == i) or ((m == j) and (n == i))) // рисуем королей в виде * в соответствии с координатами, введенными пользоателем
			{
				cout << "|*";
			}
			else 
			{
				cout << "| ";
			}
		}
		cout << "|";
		cout << endl;
	}
	for (int j = 1; j <= 8; j++) {
		cout << " -";
	}
	cout << endl;
	if ((k + l) % 2 == (m + n) % 2) // а) Выяснить, являются ли поля (k, I) и (m, n) полями одного цвета
	{
		cout << endl << "Поля одного цвета" << endl << endl;
	}
	else 
	{
		cout << "Поля разных цветов" << endl << endl;
	}
	if (((k == m) or (l == n)) or (abs(k - m) == abs(l - n))) // 6) На поле (к, I) расположен ферзь. Угрожает ли он полю (m, n)
	{
		cout << "Ферзь на первом поле угрожает второму полю" << endl << endl;
	}
	else 
	{
		cout << "Ферзь на первом поле не угрожает второму поле" << endl;
	}
	if (((abs(k - m) == 2) and (abs(l- n) == 1)) or ((abs(k - m) == 1) and (abs(l - n) == 2))) // в) На поле (к, I) расположен конь. Угрожает ли он полю (m, n)
	{
		cout << "Конь на первом поле угрожает второму полю" << endl << endl;
	}
	else 
	{
		cout << "Конь на первом поле не угрожает второму полю" << endl << endl;
	}
	if ((k == m) or (l == n)) // г) Выяснить, можно ли с поля (k, I) одним ходом ладьи попасть на поле (m, n)
	{
		cout << "Одним ходом ладьи можно попасть из первого поля во второе" << endl << endl;
	}
	else // Если нет, то выяснить, как это можно сделать за два хода (указать поле, на которое приводит первый ход)
	{
		cout << "Одним ходом ладьи невозможно попасть из первого поля во второе" << endl << endl;
		cout << "Для того, чтоб попасть из первого поля во второе за два хода ладьи, первый ход должен привести на поле с кооридинатами (" << k << ", " << n << ") или (" << m << ", " << l << ")" << endl << endl;
	}
	if ((abs(k - m) == abs(l - n)) or ((k == m) or (l == n))) // д) Выяснить, можно ли с поля (k, I) одним ходом ферзя попасть на поле (m, n)
	{
		cout << "Одним ходом ферзя можно попасть из первого поля во второе" << endl << endl;
	}
	else // Если нет, то выяснить, как это можно сделать за два хода (указать поле, на которое приводит первый ход)
	{
		cout << "Одним ходом ферзя невозможно попасть из первого поля во второе" << endl << endl;
		cout << "Для того, чтоб попасть из первого поля во второе за два хода ферзя, первый ход должен привести,например, на поле с кооридинатами (" << k << ", " << n << ") или (" << m << ", " << l << ")" << endl << endl;
	}
	if (abs(k - m) == abs(l - n)) // е) Выяснить, можно ли с поля (k, I) одним ходом слона попасть на поле (m, n)
	{
		cout << "Одним ходом слона можно попасть из первого поля во второе" << endl << endl;
	}
	else if ((k + l) % 2 != (m + n) % 2) 
	{
		cout << "Так как поля разных цветов, слон за любое кол-во ходов не сможет попасть из первого поля во второе" << endl << endl;
	}
	else // Если нет, то выяснить, как это можно сделать за два хода (указать поле, на которое приводит первый ход)
	{
		int a, b, aa, bb; // для дальнейшего вычисения пересечения диагоналей двух полей, на одно из которых переводит первых ход, чтобы за второй ход перейти на другое
		b = (l + n - m + k) / 2;
		a = b + m - n;
		bb = (l + n + m - k) / 2;
		aa = -b + n + m;
		cout << "Одним ходом слона невозможно попасть из первого поля во второе" << endl << endl;
		cout << "Для того, чтоб попасть из первого поля во второе за два хода слона, первый ход должен привести на поле с кооридинатами (" << a << ", " << b << ") или (" << aa << ", " << bb << ")" << endl << endl;
	}
	return 0;
}